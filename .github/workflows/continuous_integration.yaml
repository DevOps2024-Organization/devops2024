name: Continuous Integration
on:
  workflow_dispatch:
  pull_request:
    branches:
      - main
concurrency: production


jobs:
  BuildAndTest:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Create .env file
        run: |
          echo "DB_HOST=db" > .env
          echo "DB_PORT=5432" >> .env
          echo "DB_DATABASE=${{ secrets.DB_DATABASE }}" >> .env
          echo "DB_USER=${{ secrets.DB_USER }}" >> .env
          echo "DB_PASS=${{ secrets.DB_PASS }}" >> .env

      - name: Log in to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push app image
        uses: docker/build-push-action@v2
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/minitwitimage:latest  # Adjust tag as needed

      - name: Build and push API image
        uses: docker/build-push-action@v2
        with:
          context: .
          file: api/Dockerfile
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/minitwitapi:latest  # Adjust tag as needed

      - name: Build and push test database
        uses: docker/build-push-action@v2
        with:
          context: .
          file: ./database/Dockerfile
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/db
          build-args: |
            db=${{ secrets.DB_DATABASE }}
            dbuser=${{ secrets.DB_USER }}
            dbpassword=${{ secrets.DB_PASS }}
      - name: Set up Python
        uses: actions/setup-python@v1
        with:
          python-version:  3.9.19
      - name: Install dependencies
        run: |
          python3 -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Test Api
        run: |
          export DOCKER_USERNAME=${{ secrets.DOCKER_USERNAME }}
          export DB_DATABASE=${{ secrets.DB_DATABASE }}
          export DB_USER=${{ secrets.DB_USER }}
          export DB_PASS=${{ secrets.DB_PASS }}
          docker compose build && docker compose up -d
          until curl -s http://localhost:5000/health > /dev/null; do
            sleep 1
          done
          pytest api/api_test.py

      - name: Test App
        run: |
          pytest refactored_minitwit_tests.py

